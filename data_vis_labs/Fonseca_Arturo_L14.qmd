---
title: "L14 Tables 1 (Bonus)"
subtitle: "Data Visualization (STAT 302)"
author: "INSTRUCTIONS"
pagetitle: "L14 Arturo Fonseca (Bonus)"
date: today

format:
  html:
    toc: true
    toc-location: left
    embed-resources: true
    code-fold: show
    link-external-newwindow: true
    fig-dpi: 300

execute:
  warning: false

from: markdown+emoji 
html-table-processing: none
---

::: {.callout-important}

The is a bonus lab and is worth 10 bonus lab points.

:::

## Overview

The goal of this lab is to explore static tables using the grammar of tables from the `gt` and `gtExtras` package.

The `gt()` function creates a gt table object when provided with table data. Using this function is the first step in a typical **gt** workflow. Once we have the **gt** table object, we can perform styling transformations by adding on column, formatting, tab styling, and summary layers.

A few helpful links to provide more information about the gt package: [gt rstudio](https://gt.rstudio.com/) and [intro to gt](https://gt.rstudio.com/articles/intro-creating-gt-tables.html)

Posit (formally RStudio) hosts an annual table competition! Check out some past winning tables: [2021](https://www.rstudio.com/blog/winners-of-the-2021-table-contest/) [2022](https://posit.co/blog/winners-of-the-2022-table-contest/)

## Dataset 

We will be using the `pizzaplace` dataset included in the `gt` package, the `house_prices`, `stream_data`, and `team_logo` dataset which should be located in your `/data` subdirectory. Each dataset will require a bit of data wrangling provided in their respective exercise code chunk.

```{r}
#| label: laod-pkgs-data
#| code-fold: false

# load package(s)

# load data

```


## Exercise 1

Use the `pizza_summary` dataset created below to recreate the following graphic as precisely as possible. We will work through this exercise together to provide a high level overview of a few of the ways you can layer on table elements to make a simple but visually appealing table.

*Hints:*

- `md()`: Interpret input text as Markdown-formatted text

```{r}
#| label: ex-1
#| eval: false

# data wrangling
pizza_summary <- pizzaplace |> 
  filter(type %in% c("classic", "chicken")) |> 
  group_by(name, type) |> 
  summarize(
    number_sold = n(),
    profit = sum(price)
    ) |> 
  ungroup()
```

::: {.callout-tip icon=false}

## Solution

:::

## Exercise 2

Using the `pizza_size` dataset derived from the `pizzaplace` dataset, recreate the following graphic as precisely as possible.

```{r}
#| label: ex-2
#| eval: false

# data wrangling
pizza_size <- pizzaplace |> 
  filter(
    size %in% c("S", "L", "M"), 
    type %in% c("chicken", "classic", "veggie")
    ) |> 
  group_by(type, size) |> 
  summarize(
    number_sold = n(),
    profit = sum(price)
    ) |> 
  ungroup() |> 
  rename(category = type)
```

### Table 1

*Hints:*

- `tab_style()` is useful for changing cell colors
- Hex codes: `"#F8766D"`, `"#00BA38"`, `"#619CFF"`
- size L: bold
- size M: italic
- size S: `"white"`

::: {.callout-tip icon=false}

## Solution

:::

### Table 2

*Hints:*

- `gt_color_rows` is useful for changing entire column colors
- manual colors `c("white", "skyblue")`
- `Pastel1` palette from `RColorBrewer` package

::: {.callout-tip icon=false}

## Solution

:::

## Exercise 3

Using the `house_illinois` dataset derived from the `house_price` dataset, recreate the following graphic as precisely as possible.

Similar to the ggplot `scales_*()` function, the `gt` package has useful transformations that can be performed using the following syntax `tab_*()`, `fmt_*()`, `cols_*()`. Check the package documentation for a full list of options.

```{r}
#| label: ex-3
#| eval: false

# data wrangling
house_illinois <- house_prices |> 
  filter(state %in% c("Illinois")) |> 
  mutate(year = year(date)) |> 
  filter(year %in% c(2005:2010) ) |> 
  group_by(year) |> 
  summarize(
    hpi = mean(house_price_index),
    change = mean(house_price_perc)
    )
```

*Hints:*

- color is `"red"` for all percents less than 0
- percent is accounting
- currency `"USD"`
- `"Housing Price Index"` label is a `tab_*()` layer

::: {.callout-tip icon=false}

## Solution

:::

## Exercise 4

Adding icons and graphics to a table is made easy with `gtExtras`. Using the `stream_data` dataset, recreate the following graphic as precisely as possible.

*Hints:*

- `gt_plt_bullet()`
- `nytimes theme()`
- `fmt_symbol_first()`

::: {.callout-tip icon=false}

## Solution

```{r}
#| label: ex-4
#| eval: false

# pipe the following code into your gt functions
stream_data |> 
  mutate(
    type = map(type, fontawesome::fa)
  ) 
```

:::

## Exercise 5

Using the `team_logo` dataset, recreate the following graphic as precisely as possible.

The `tab_options()` layer for `gt` is similar to the `theme()` option for `ggplot`. Here you can add customization to the background colors, line type, size, etc.

*Hints:*

- `gt_img_rows` with `height = 30`
- tab options:
  - data row padding is px(1)
  - table background color is `"gray90"`
  - table width is 100%
  - table font color is `"red"`
  - column labels have background color `"black"`, font size `"large"`, and font weight `"bold"`,
  - table body has hlines color `"red"`
  - table body has border bottom color `"red"`


::: {.callout-tip icon=false}

## Solution

```{r}
#| label: ex-5
#| eval: false

# pipe the following code into your gt functions
team_logo |>
  dplyr::select(logo = team_logo_espn, team_name, team_nick, team_conf) |>
  slice_head(n = 6)
```

:::